@page "/admin/player"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@rendermode InteractiveServer
@attribute [Authorize]


<BSContainer class="content pb-5">
    <RadzenCard>
    <h3>Spiller liste</h3>
@if (players == null)
{
    <p>Henter ...</p>
}
else
{
    <RadzenDataGrid @ref="playerGrid" AllowAlternatingRows="false" EditMode="DataGridEditMode.Single"
                    Data="@players" TItem="PlayerModel" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
        <HeaderTemplate>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Ny spiller" Click="@InsertRow" Disabled="@Editing" />
        </HeaderTemplate>
        <Columns>

            <RadzenDataGridColumn Property="@nameof(PlayerModel.PlayerName)" Title="Navn">
                <EditTemplate Context="player">
                    <RadzenTextBox @bind-Value="player.PlayerName" Style="width:200px; display: block" Name="PlayerName" aria-label="Angiv et navn" />
                    <RadzenRequiredValidator Text="Navn skal angives" Component="PlayerName" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(PlayerModel.HcpIndex)" Title="HcpIndex" TextAlign="TextAlign.Center" CssClass="col">
                <Template Context="player">
                    @String.Format("{0:F1}", player.HcpIndex)
                </Template>
                <EditTemplate Context="player">
                    <RadzenNumeric @bind-Value="player.HcpIndex" Style="width:100%" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Angiv spillers hcp index" }})" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="player" Width="160px" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="player">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@(args => EditRow(player))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(player))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="player">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" Click="@((args) => SaveRow(player))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(player))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="Radzen.ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(player))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
    </RadzenCard>
</BSContainer>

<ConfirmDialog @ref="dialog" />

@code
{

    public RadzenDataGrid<PlayerModel> playerGrid;
    private ConfirmDialog dialog = default!;

    public IEnumerable<PlayerModel> players { get; set; }
    
    public bool Editing { get; set; } = false;

    [Inject] public required ToastService ToastService { get; set; }
    [Inject] private IRepository _repo { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        players = await _repo.GetAllPlayers();
    }

    #region Grid events

    async Task OnUpdateRow(PlayerModel player)
    {
        await SaveRow(player);
    }
    async void OnCreateRow(PlayerModel player)
    {
        //await UpdateRow(player);
        throw new NotImplementedException("OnCreateRow called");
    }

    async Task EditRow(PlayerModel player)
    {
        await playerGrid.EditRow(player);
        Editing = true;
    }
    async Task SaveRow(PlayerModel model)
    {
        try { 
            var newModel = await _repo.UpsertPlayer(model);
            ToastService.Notify(new(ToastType.Success, "Spilleren er opdateret"));
            await LoadData();
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Warning, $"Der opstod en fejl: {ex.Message}"));
            playerGrid.CancelEditRow(model);
        }
        await playerGrid.Reload();
        Editing = false;
    }
    async Task DeleteRow(PlayerModel model)
    {
        var options = new ConfirmDialogOptions { Size = DialogSize.Small };

        var confirmation = await dialog.ShowAsync(
            title: "Hva sååå!",
            message1: "Skal den slettes?",
            confirmDialogOptions: options);

        if (!confirmation)
        {
            return;
        }

        try { 
            int i = await _repo.DeletePlayer(model.PlayerId);
            ToastService.Notify(new(ToastType.Success, "Spilleren er droppet"));
            await LoadData();
        }
        catch(Exception ex)
        {
            playerGrid.CancelEditRow(model);
            ToastService.Notify(new(ToastType.Warning, $"Der opstod en fejl: {ex.Message}"));
        }
        await playerGrid.Reload();
        StateHasChanged();
    }
    async Task InsertRow()
    {
        var model = new PlayerModel();
        await playerGrid.InsertRow(model);
        Editing = true;
    }
    void CancelEdit(PlayerModel model)
    {
        playerGrid.CancelEditRow(model);
        Editing = false;
    }
    #endregion

    protected async Task LoadData()
    {
        players = await _repo.GetAllPlayers();
    }

}
